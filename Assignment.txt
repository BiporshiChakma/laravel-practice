
01 : Create a new migration file to add a new table named "categories" to the database. The table should have the following columns:


id (primary key, auto-increment)

name (string)

created_at (timestamp)

updated_at (timestamp)

Ans: 
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateCategoriesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('categories', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('categories');
    }
}




02: Create a new model named "Category" associated with the "categories" table. Define the necessary properties and relationships.

Answer: 
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Category extends Model
{
    protected $fillable = ['name'];

    public function products()
    {
        return $this->hasMany(Product::class);
    }
}


03:Write a migration file to add a foreign key constraint to the "posts" table. The foreign key should reference the "categories" table on the "category_id" column.

Ans :

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddForeignKeyToPostsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->foreign('category_id')
                ->references('id')
                ->on('categories')
                ->onDelete('cascade');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table->dropForeign(['category_id']);
        });
    }
}



04: Create a relationship between the "Post" and "Category" models. A post belongs to a category, and a category can have multiple posts.
Ans : 

POST model:
<?php
namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    // ...

    public function category()
    {
        return $this->belongsTo(Category::class);
    }
}


Category Model:
namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Category extends Model
{
    // ...

    public function posts()
    {
        return $this->hasMany(Post::class);
    }
}

05:Write a query using Eloquent ORM to retrieve all posts along with their associated categories. Make sure to eager load the categories to optimize the query
Ans:
use App\Models\Post;

$posts = Post::with('category')->get();

foreach ($posts as $post) {
    // Access post information
    echo "Post Title: " . $post->title . "\n";
    echo "Post Category: " . $post->category->name . "\n";
    // ... other post attributes

    echo "\n";
}


06:Implement a method in the "Post" model to get the total number of posts belonging to a specific category. The method should accept the category ID as a parameter and return the count.

Ans:

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    // ...

    public static function getCountByCategory($categoryId)
    {
        return self::where('category_id', $categoryId)->count();
    }
}


07: Create a new route in the web.php file to handle the following URL pattern: "/posts/{id}/delete". Implement the corresponding controller method to delete a post by its ID. Soft delete should be used.
Ans:

file: web.php

use App\Http\Controllers\PostController;

// ...

Route::delete('/posts/{id}/delete', [PostController::class, 'destroy']);


PostController:
namespace App\Http\Controllers;

use App\Models\Post;
use Illuminate\Http\Request;

class PostController extends Controller
{
    public function destroy($id)
    {
        $post = Post::findOrFail($id);
        $post->delete();

        return redirect()->route('posts.index')->with('success', 'Post deleted successfully');
    }
}



08:Implement a method in the "Post" model to get all posts that have been soft deleted. The method should return a collection of soft deleted posts.
Ans:
namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Post extends Model
{
    use SoftDeletes;

    // ...

    public static function getSoftDeletedPosts()
    {
        return self::onlyTrashed()->get();
    }
}



09:Write a Blade template to display all posts and their associated categories. Use a loop to iterate over the posts and display their details.
Ans:
@foreach ($posts as $post)
    <h2>{{ $post->title }}</h2>
    <p>Category: {{ $post->category->name }}</p>
    <p>Excerpt: {{ $post->excerpt }}</p>
    <p>Description: {{ $post->description }}</p>
    <!-- ... other post details -->
@endforeach



10:Create a new route in the web.php file to handle the following URL pattern: "/categories/{id}/posts". Implement the corresponding controller method to retrieve all posts belonging to a specific category. The category ID should be passed as a parameter to the method.
Ans:

file:web.php

use App\Http\Controllers\CategoryController;

// ...

Route::get('/categories/{id}/posts', [CategoryController::class, 'getPostsByCategory']);




CategoryController:

namespace App\Http\Controllers;

use App\Models\Category;
use Illuminate\Http\Request;

class CategoryController extends Controller
{
    public function getPostsByCategory($id)
    {
        $category = Category::findOrFail($id);
        $posts = $category->posts()->get();

        return view('posts.index', compact('posts'));
    }
}



11:Implement a method in the "Category" model to get the latest post associated with the category. The method should return the post object.

Ans:


namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Category extends Model
{
    // ...

    public function latestPost()
    {
        return $this->hasOne(Post::class)->latest();
    }
}




$category = Category::find($categoryId);
$latestPost = $category->latestPost;

if ($latestPost) {
    // Access the latest post details
    echo "Latest Post Title: " . $latestPost->title . "\n";
    // ... other post attributes
} else {
    echo "No posts found for the category.";
}



12: Write a Blade template to display the latest post for each category. Use a loop to iterate over the categories and display the post details.


Ans:
@foreach ($categories as $category)
    <h2>{{ $category->name }}</h2>

    @if ($category->latestPost)
        <h3>{{ $category->latestPost->title }}</h3>
        <p>{{ $category->latestPost->excerpt }}</p>
        <p>{{ $category->latestPost->description }}</p>
        <!-- ... other post details -->
    @else
        <p>No posts found for this category.</p>
    @endif

    <hr>
@endforeach


